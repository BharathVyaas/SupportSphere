import { useEffect, useMemo, useRef } from "react";
import { useDispatch, useSelector } from "react-redux";
import { primaryRouteActions } from "../store/crowdfunding";
import { EventEmitter } from "../util";
import _debounce from "lodash/debounce";
import { defaultConfing } from "../util/defaultConfig";

// This hook is generated by chatgpt :]
function useDeepEqualSelector(selector) {
  const prevSelectedState = useRef(null);

  const selectedState = useSelector(selector);

  const memoizedState = useMemo(() => {
    if (deepEqual(selectedState, prevSelectedState.current)) {
      // If the state hasn't changed, return the previous state
      return prevSelectedState.current;
    }

    // If the state has changed, update the ref and return the new state
    prevSelectedState.current = selectedState;
    return selectedState;
  }, [selectedState]);

  return memoizedState;
}

/**
 * Custom hook for handling dynamic resizing of navigation elements.
 * @returns {Object} - An object containing properties related to navigation.
 * @property {Array} dropdown - The dropdown menu items.
 * @property {Array} nav - The main navigation items.
 * @property {number} dropdownLength - The length of the dropdown menu.
 * @property {number} navLength - The length of the main navigation.
 */
function useNavList() {
  const primaryRoutes = useDeepEqualSelector((state) => state.primaryRoutes);
  const { dropdown, nav } = useMemo(() => primaryRoutes, [primaryRoutes]);
  const dropdownLength = dropdown.length;
  const navLength = nav.length;
  const dispatch = useDispatch();
  console.log("navlist");

  useEffect(() => {
    const resizeHandler = _debounce((size) => {
      console.log("hi");
      dispatch(primaryRouteActions.updateNav(size));
    }, defaultConfing.refreshNav);
    EventEmitter.on("reSize", resizeHandler);
    return () => EventEmitter.off("reSize", resizeHandler);
  }, [dispatch]);

  return { dropdown, nav, dropdownLength, navLength };
}

export default useNavList;

// Helper function to perform a deep equality check
function deepEqual(obj1, obj2) {
  return JSON.stringify(obj1) === JSON.stringify(obj2);
}
